/**
 * 
 */
package com.neu.pdp.mapReduce;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * The Mapper class for word count which creates a token for each word
 * and creates intermediate values of type <Text, IntWritable>
 * @author ideepakkrishnan
 */
public class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {
	
	private static final Logger logger = LogManager.getLogger(
			TokenizerMapper.class.getName());
	
	private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
    	StringTokenizer itr = new StringTokenizer(value.toString());
		while (itr.hasMoreTokens()) {
			word.set(itr.nextToken());
		    context.write(word, one);
		}
    }
}
