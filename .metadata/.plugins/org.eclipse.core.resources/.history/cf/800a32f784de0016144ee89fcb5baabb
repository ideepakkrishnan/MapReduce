package com.neu.pdp;

import java.util.HashMap;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.neu.pdp.calculators.SequentialCalculator;
import com.neu.pdp.calculators.CoarseLockCalculator;
import com.neu.pdp.calculators.FineLockCalculator;
import com.neu.pdp.calculators.NoLockCalculator;
import com.neu.pdp.calculators.NoSharingCalculator;

/**
 * Contains the calls to all versions of the program
 * @author ideepakkrishnan
 */
public class App 
{
	private static final Logger logger = LogManager.getLogger(
			App.class.getName());
	
	/**
	 * Main method for this project
	 * @param args
	 */
    public static void main( String[] args )
    {
    	logger.info("Entering the main method");
    	
    	// Local variables
    	String path = "/home/ideepakkrishnan/Downloads/1763.csv.gz";
    	List<String> lstWeatherData = Util.readCSVFile(path);
    	HashMap<String, Float> hmAvgReadingByStation;
    	HashMap<String, List<Integer>> hmReadingsByStationId;
    	
    	if (!lstWeatherData.isEmpty() &&
    			lstWeatherData.size() > 0) {
    		// Step 1: Sequential execution
    		/*logger.info("Data read complete. Calling sequential method");
    		hmAvgReadingByStation = SequentialCalculator.calculate(
    				lstWeatherData);
    		
    		Util.printAverageTMaxByStation(hmAvgReadingByStation);
    		logger.info("Completing sequential average calculator");
    		
    		// Explicitly marking for garbage collection
    		hmAvgReadingByStation = null;*/
    		
    		// Step 2: No-lock execution
    		logger.info("Calling no-lock average calculator");
    		hmReadingsByStationId = 
        			new HashMap<String, List<Integer>>();
    		
    		NoLockCalculator n1 = new NoLockCalculator(
    				"Thread 1", 
    				lstWeatherData.subList(0, lstWeatherData.size() / 2),
    				hmReadingsByStationId);
    		n1.start();
    		
    		NoLockCalculator n2 = new NoLockCalculator(
    				"Thread 2", 
    				lstWeatherData.subList(
    						(lstWeatherData.size() / 2) + 1, 
    						lstWeatherData.size()), 
    				hmReadingsByStationId);
    		n2.start();
    		
    		// Wait for both the threads to complete execution
    		try {
				n1.getThreadObject().join();
				n2.getThreadObject().join();
				
				// Calculate the average reading for each station
	    		hmAvgReadingByStation = Util.getAverageTMaxByStation(
	    				hmReadingsByStationId);
	    		
	    		Util.printAverageTMaxByStation(hmAvgReadingByStation);	    		
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
    		    		    		
    		// Explicitly marking for garbage collection
    		hmAvgReadingByStation = null;
    		hmReadingsByStationId = null;
    		n1 = null;
    		n2 = null;
    		
    		logger.info("Completing no-lock average calculator");
    		
    		// Step 3: Coarse lock version
    		logger.info("Calling coarse-lock average calculator");
    		
    		hmReadingsByStationId = 
        			new HashMap<String, List<Integer>>();
    		
    		CoarseLockCalculator c1 = new CoarseLockCalculator(
    				"Thread 1", 
    				lstWeatherData.subList(0, lstWeatherData.size() / 2),
    				hmReadingsByStationId);
    		c1.start();
    		
    		CoarseLockCalculator c2 = new CoarseLockCalculator(
    				"Thread 2", 
    				lstWeatherData.subList(
    						(lstWeatherData.size() / 2) + 1, 
    						lstWeatherData.size()), 
    				hmReadingsByStationId);
    		c2.start();
    		
    		// Wait for both the threads to complete execution
    		try {
				c1.getThreadObject().join();
				c2.getThreadObject().join();
				
				// Calculate the average reading for each station
	    		hmAvgReadingByStation = Util.getAverageTMaxByStation(
	    				hmReadingsByStationId);
	    		
	    		Util.printAverageTMaxByStation(hmAvgReadingByStation);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
    		
    		// Explicitly marking for garbage collection
    		hmAvgReadingByStation = null;
    		hmReadingsByStationId = null;
    		c1 = null;
    		c2 = null;
    		
    		logger.info("Completing coarse-lock average calculator");
    		
    		// Step 4: Fine lock version
    		logger.info("Calling fine-lock average calculator");
    		
    		hmReadingsByStationId = 
        			new HashMap<String, List<Integer>>();
    		
    		FineLockCalculator f1 = new FineLockCalculator(
    				"Thread 1", 
    				lstWeatherData.subList(0, lstWeatherData.size() / 2),
    				hmReadingsByStationId);
    		f1.start();
    		
    		FineLockCalculator f2 = new FineLockCalculator(
    				"Thread 2", 
    				lstWeatherData.subList(
    						(lstWeatherData.size() / 2) + 1, 
    						lstWeatherData.size()), 
    				hmReadingsByStationId);
    		f2.start();
    		
    		// Wait for both the threads to complete execution
    		try {
				f1.getThreadObject().join();
				f2.getThreadObject().join();
				
				// Calculate the average reading for each station
	    		hmAvgReadingByStation = Util.getAverageTMaxByStation(
	    				hmReadingsByStationId);
	    		
	    		Util.printAverageTMaxByStation(hmAvgReadingByStation);	    		
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
    		
    		// Explicitly marking for garbage collection
    		hmAvgReadingByStation = null;
    		hmReadingsByStationId = null;
    		f1 = null;
    		f2 = null;
    		
    		logger.info("Completing fine-lock average calculator");
    		
    		// Step 5: No sharing version
    		logger.info("Calling no-sharing average calculator");
    		
    		NoSharingCalculator ns1 = new NoSharingCalculator(
    				"Thread 1", 
    				lstWeatherData.subList(0, lstWeatherData.size() / 2));
    		ns1.start();
    		
    		NoSharingCalculator ns2 = new NoSharingCalculator(
    				"Thread 2", 
    				lstWeatherData.subList(
    						(lstWeatherData.size() / 2) + 1, 
    						lstWeatherData.size()), 
    				hmReadingsByStationId);
    		ns2.start();
    		
    		// Wait for both the threads to complete execution
    		try {
				f1.getThreadObject().join();
				f2.getThreadObject().join();
				
				// Calculate the average reading for each station
	    		hmAvgReadingByStation = Util.getAverageTMaxByStation(
	    				hmReadingsByStationId);
	    		
	    		Util.printAverageTMaxByStation(hmAvgReadingByStation);	    		
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
    		
    		// Explicitly marking for garbage collection
    		hmAvgReadingByStation = null;
    		hmReadingsByStationId = null;
    		f1 = null;
    		f2 = null;
    		
    		logger.info("Completing no-sharing average calculator");
    	}
    	
    	logger.info("Exiting the main method");
    }
}
