/**
 * 
 */
package com.neu.pdp;

import java.util.List;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.zip.GZIPInputStream;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Utility class for the project which contains all helper
 * functions
 * 
 * @author ideepakkrishnan
 * 
 */
public class Util {
	
	private static final Logger logger = LogManager.getLogger(
			Util.class.getName());
	
	/**
	 * Reads the contents stored in a .csv.gz file and returns
	 * it as a List of strings, where each element corresponds
	 * to a line in the CSV file.
	 * @param path Path where the input file is stored
	 * @return A List of String-s
	 */
	public static List<String> readCSVFile(String path) {
		logger.info("Entering readCSVFile method");
		// Local variables
		String line;
		
		// A List object will be used to store the data since
		// the size of the data is dynamic
		List<String> lstWeatherData = new ArrayList<String>();
		
		try {
			// Initialize a GZIP input stream to access the file
			GZIPInputStream gisInput = new GZIPInputStream(
					new FileInputStream(path));
			
			// Initialize a buffer reader to read the input data
			BufferedReader br = new BufferedReader(
					new InputStreamReader(gisInput));
			
			// Read the data from the input file 
			logger.info("Reading data from file");
			while ((line = br.readLine()) != null) {
				lstWeatherData.add(line);
			}
			logger.info("Completed reading data from file");
		} catch (FileNotFoundException e) {
			logger.error(e.getStackTrace());
		} catch (IOException e) {
			logger.error(e.getStackTrace());
		}
		
		logger.info("Returning from readCSVFile method");
		return lstWeatherData;
	}
	
	/**
	 * Calculates the average of an array of integers and returns
	 * it to the caller
	 * @param values An array of integers
	 * @return Average value as a float
	 */
	public static float findAverage(int[] values) {
		logger.info("Entering findAverage method");
		
		// Local variables
		float fAverageValue = 0;
		
		// Calculate the average
		if (values.length > 0) {			
			for (int iCurrVal : values) {
				fAverageValue += iCurrVal;
			}
			
			fAverageValue /= values.length;
		}
		
		// Returning the result
		logger.info("Returning from findAverage method");
		return fAverageValue;
	}
	
	public static HashMap<String, List<Integer>> getTMaxReadingsByStation(
			List<String> lstWeatherData) {
		HashMap<String, List<Integer>> hmFilteredData = 
				new HashMap<String, List<Integer>>();
		
		return hmFilteredData;
	}
}
